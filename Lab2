def compute_ngrams(toks, n=2):
    
    phrases=[]
    for i in range(len(toks)-(n-1)):
        phrases.append(toks[i:i+n])
    
    
    """Returns an n-gram dictionary based on the provided list of tokens."""
    newDict={}
    for x in phrases:  #x=list
        if x[0] not in newDict: #if the first word is not yet a keyword
            newDict[x[0]]=[tuple([x for x in x[1:(n+1)]])]
        else:
            newDict[x[0]]+=[tuple([x for x in x[1:(n+1)]])]
    
    return newDict


def gen_passage(ngram_dict, length=100):

    new=sorted(ngram_dict.keys())
    randKey=random.choice(new)
    passage=randKey
    tokCount=1
    
    while(tokCount<length):
        randTup=random.choice(ngram_dict[randKey])
        for x in randTup:  #append tuple elements to end of passage
            passage+=' '+x
            tokCount+=1
        randKey=randTup[-1]  #new keyword is last word in tuple
        
        if randKey not in ngram_dict:   #if new keyword is not in the dictionary
            randKey=random.choice(new)  #assign new, random keyword from dictionary
            passage+=' '+randKey
            tokCount+=1

    return passage

